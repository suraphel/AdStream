#!/bin/bash

# EthioMarket Monitoring Stack Deployment Script
# Supports both English and Amharic output

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Language setting (default: English)
LANG=${1:-en}

# Translations
if [ "$LANG" = "am" ]; then
    STARTING_DEPLOYMENT="üöÄ ·ã®·ä≠·âµ·âµ·àç ·àµ·à≠·ãì·âµ ·àò·ãò·à≠·åã·âµ ·ä•·ã®·åÄ·àò·à®..."
    CHECKING_DOCKER="üê≥ ·ã∂·ä®·à≠ ·ä•·äì ·ã∂·ä®·à≠-·äÆ·àù·çñ·ãù ·àò·äñ·à´·â∏·ãç·äï ·ä•·ã®·â∞·àò·à®·àò·à®..."
    DOCKER_NOT_FOUND="‚ùå ·ã∂·ä®·à≠ ·ä†·àç·â∞·åà·äò·àù·ç¢ ·ä•·â£·ä≠·ãé ·ã∂·ä®·à≠·äï ·å´·äë"
    DOCKER_COMPOSE_NOT_FOUND="‚ùå ·ã∂·ä®·à≠-·äÆ·àù·çñ·ãù ·ä†·àç·â∞·åà·äò·àù·ç¢ ·ä•·â£·ä≠·ãé ·ã∂·ä®·à≠-·äÆ·àù·çñ·ãù·äï ·å´·äë"
    CREATING_DIRS="üìÅ ·ä†·àµ·çà·àã·åä ·ã≤Î†âÌÜ†·à™·ãé·âΩ·äï ·ä•·ã®·çà·å†·à®..."
    SETTING_PERMISSIONS="üîê ·çç·âÉ·ã∂·âΩ·äï ·ä•·ã´·ã∞·à®·åà..."
    STARTING_SERVICES="‚ö° ·ä†·åà·àç·åç·àé·â∂·âΩ·äï ·ä•·ã®·åÄ·àò·à®..."
    WAITING_SERVICES="‚è≥ ·ä†·åà·àç·åç·àé·â∂·âΩ ·ä•·àµ·ä®·àö·ãò·åã·åÅ ·ãµ·à®·àµ ·ä•·ã®·å†·â†·âÄ..."
    CHECKING_HEALTH="üè• ·ã®·ä†·åà·àç·åç·àé·â∂·âΩ ·å§·äï·äê·âµ ·ä•·ã®·â∞·àò·à®·àò·à®..."
    SUCCESS="‚úÖ ·ã®·ä≠·âµ·âµ·àç ·àµ·à≠·ãì·âµ ·â†·â∞·à≥·ä´ ·àÅ·äî·â≥ ·â∞·ãò·à≠·åç·â∑·àç!"
    ACCESS_INFO="üìä ·ã®·àò·ã≥·à™·ã´ ·àò·à®·åÉ:"
    GRAFANA_URL="   ·åç·à´·çã·äì ·ã≥·àΩ·â¶·à≠·ãµ"
    PROMETHEUS_URL="   ·çï·àÆ·àú·â≤·ã®·àµ"
    ALERTMANAGER_URL="   ·àõ·äï·âÇ·ã´ ·ä†·àµ·â∞·ã≥·ã≥·à™"
    DEFAULT_CREDS="üîë ·äê·â£·à™ ·ã®·àò·åç·â¢·ã´ ·àò·à®·åÉ - ·â∞·å†·âÉ·àö·ç° admin, ·àò·ä≠·çà·âª·ç° admin123"
    HEALTH_CHECK="üîç ·ã®·å§·äï·äê·âµ ·àù·à≠·àò·à´"
    METRICS_ENDPOINT="üìà ·ã®·àò·àà·ä™·ã´ ·äê·å•·â•"
    ERROR="‚ùå ·àµ·àÖ·â∞·âµ·ç°"
else
    STARTING_DEPLOYMENT="üöÄ Starting EthioMarket monitoring stack deployment..."
    CHECKING_DOCKER="üê≥ Checking for Docker and Docker Compose..."
    DOCKER_NOT_FOUND="‚ùå Docker not found. Please install Docker"
    DOCKER_COMPOSE_NOT_FOUND="‚ùå Docker Compose not found. Please install Docker Compose"
    CREATING_DIRS="üìÅ Creating required directories..."
    SETTING_PERMISSIONS="üîê Setting permissions..."
    STARTING_SERVICES="‚ö° Starting monitoring services..."
    WAITING_SERVICES="‚è≥ Waiting for services to be ready..."
    CHECKING_HEALTH="üè• Checking service health..."
    SUCCESS="‚úÖ Monitoring stack deployed successfully!"
    ACCESS_INFO="üìä Access Information:"
    GRAFANA_URL="   Grafana Dashboard"
    PROMETHEUS_URL="   Prometheus"
    ALERTMANAGER_URL="   AlertManager"
    DEFAULT_CREDS="üîë Default credentials - User: admin, Password: admin123"
    HEALTH_CHECK="üîç Health Check"
    METRICS_ENDPOINT="üìà Metrics Endpoint"
    ERROR="‚ùå Error:"
fi

echo -e "${BLUE}$STARTING_DEPLOYMENT${NC}"

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}$DOCKER_NOT_FOUND${NC}"
    echo "https://docs.docker.com/get-docker/"
    exit 1
fi

# Check if Docker Compose is installed
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "${RED}$DOCKER_COMPOSE_NOT_FOUND${NC}"
    echo "https://docs.docker.com/compose/install/"
    exit 1
fi

echo -e "${GREEN}$CHECKING_DOCKER${NC}"

# Create required directories
echo -e "${YELLOW}$CREATING_DIRS${NC}"
mkdir -p monitoring/{prometheus/{data,rules},grafana/{data,provisioning/{datasources,dashboards},dashboards},alertmanager/data}

# Set proper permissions for Grafana
echo -e "${YELLOW}$SETTING_PERMISSIONS${NC}"
sudo chown -R 472:472 monitoring/grafana/data 2>/dev/null || {
    echo "Note: Could not set Grafana permissions. Running as current user."
}

# Copy dashboard files if they don't exist
if [ ! -f monitoring/grafana/dashboards/ethiomarket-overview.json ]; then
    echo "Warning: Dashboard files not found. Please ensure dashboard JSON files are in monitoring/grafana/dashboards/"
fi

# Start the monitoring stack
echo -e "${YELLOW}$STARTING_SERVICES${NC}"
cd monitoring

# Use docker-compose or docker compose based on availability
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE_CMD="docker-compose"
else
    DOCKER_COMPOSE_CMD="docker compose"
fi

$DOCKER_COMPOSE_CMD up -d

# Wait for services to be ready
echo -e "${YELLOW}$WAITING_SERVICES${NC}"
sleep 30

# Check service health
echo -e "${YELLOW}$CHECKING_HEALTH${NC}"

check_service() {
    local service_name=$1
    local url=$2
    local timeout=30
    local count=0
    
    while [ $count -lt $timeout ]; do
        if curl -s "$url" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úì $service_name is healthy${NC}"
            return 0
        fi
        sleep 2
        count=$((count + 1))
    done
    
    echo -e "${RED}‚úó $service_name is not responding${NC}"
    return 1
}

# Check each service
check_service "Prometheus" "http://localhost:9090"
check_service "Grafana" "http://localhost:3000"
check_service "AlertManager" "http://localhost:9093"

echo ""
echo -e "${GREEN}$SUCCESS${NC}"
echo ""
echo -e "${BLUE}$ACCESS_INFO${NC}"
echo -e "${GREEN}$GRAFANA_URL: http://localhost:3000${NC}"
echo -e "${GREEN}$PROMETHEUS_URL: http://localhost:9090${NC}"
echo -e "${GREEN}$ALERTMANAGER_URL: http://localhost:9093${NC}"
echo ""
echo -e "${YELLOW}$DEFAULT_CREDS${NC}"
echo ""
echo -e "${BLUE}Additional Endpoints:${NC}"
echo -e "${GREEN}$HEALTH_CHECK: http://localhost:5000/health${NC}"
echo -e "${GREEN}$METRICS_ENDPOINT: http://localhost:5000/metrics${NC}"
echo ""

# Display running services
echo -e "${BLUE}Running Services:${NC}"
$DOCKER_COMPOSE_CMD ps

echo ""
echo -e "${GREEN}üéâ Your EthioMarket monitoring stack is ready!${NC}"
if [ "$LANG" = "am" ]; then
    echo -e "${GREEN}üéâ ·ã®·ä•·à≠·àµ·ãé ·ä¢·âµ·ãÆ·àõ·à≠·ä¨·âµ ·ä≠·âµ·âµ·àç ·àµ·à≠·ãì·âµ ·â∞·ãò·åã·åÖ·â∑·àç!${NC}"
fi